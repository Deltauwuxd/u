ข้อที่1: ให้นักศึกษาเปิดใช้งาน EC2 instance ประเภท t2.micro ซึ่งติดตั้งระบบปฏิบัติการ Amazon Linux 2023 โดยตั้งชื่อ EC2 instance เป็น ec2xxxxyyyy
(แทนที่ xxxx ด้วยเลขสี่ตัวสุดท้ายของรหัสนักศึกษา และ yyyy ด้วยรหัสส่วนตัวของนักศึกษา) นักศึกษาจะต้องตั้งค่าให้สามารถเข้าถึง instance นี้จากสาธารณะได้
จากนั้นให้SSH เข้าไปที่ instance และรันคําสั่ง Linux CLI หนึ่งคําสั่งเพื่อแสดงการใช้งานเบื้องต้น
1)เข้า EC2 เลือก Launch Instance
-Amazon Linux 2023 AMI (default)
-ชื่อ : ec206991234
-t2.micro (default)
-Key pair name : Proceed without a key pair (Not recommended)
-Network settings : Allow SSH traffic from Anywhere (default)
2)อยู่หน้า instace เหมือนเดิมเลือกตัวที่สร้างแล้วกด Connect มุมขวาบนแล้วกด Connect อีกทีด้านใน EC2 Instance Connect
3)พิมพ์สักคำสั่ง เช่น df -h
สิ่งที่ต้องส่ง: Capture ในภาพเดียวให้เห็นหน้าจอ Instance Summary ที่แสดงรายละเอียดของ EC2 instance ได้แก่ชื่อ, ประเภท และ Public IPv4 DNS ของ
instance ได้ชัดเจนพร้อมกับหน้าจอที่แสดง terminal ที่เห็นผลลัพธ์ของคําสั่ง Linux CLI ที่รันสมบูรณ์แล้ว

—--------------------------------------------------------------------------------------------
ข้อที่2: ให้นักศึกษาเปิดใช้งาน EC2 instance ประเภท t2.micro ร่วมกับการใช้user data เพื่อติดตั้ง Web server (httpd) และสร้างเว็บเพจ index.html แบบ
ง่ายด้วยคําสั่ง echo ให้มีข้อความ
<center><h1>This is xxxx instance with the code yyyy that runs the Apache Webserver!</h1></center> ตั้งค่า Security group ตามความ
เหมาะสม และตรวจสอบการเปิดหน้าเว็บผ่าน Web browser 
1)เข้า EC2 เลือก Launch Instance
-ชื่อ : ec206991234
-t2.micro (default)
-Key pair name : Proceed without a key pair (Not recommended)
-Allow HTTPS traffic from the internet
-Allow HTTP traffic from the internet
-Adavanced details -> User data
#!/bin/bash
yum update -y
yum install httpd -y
echo "<center><h1>This is xxxx instance with the code yyyy that runs the Apache Webserver!</h1></center>" > /var/www/html/index.html
systemctl start httpd
systemctl enable httpd
2)รอจนกว่าจะ 2/2 checks passed แล้วเข้า Public IPv4 address (http)
สิ่งที่ต้องส่ง: ส่งภาพเดียวให้เห็นหน้าจอ Instance Summary ที่แสดงรายละเอียดของ EC2 instance ได้แก่ชื่อ, ประเภท และ Public IPv4 DNS ของ instance ได้
ชัดเจน พร้อมกับสคริปต์user data ของ instance พร้อมกับหน้าเว็บเพจ index.html ใน Chrome web browser ให้เห็น URL ของเว็บเพจชัดเจน

—--------------------------------------------------------------------------------------------
ข้อที่3: ให้นักศึกษาสร้าง S3 bucket ชื่อ s3xxxxyyyy (แทนที่ xxxx ด้วยเลขสี่ตัวสุดท้ายของรหัสนักศึกษา และ yyyy ด้วยรหัสส่วนตัวของนักศึกษา) จากนั้น
อัปโหลดไฟล์และตั้งค่าการอนุญาตให้ไฟล์สามารถเข้าถึงได้จากสาธารณะ ทดสอบลิงก์สาธารณะดังกล่าวใน Web browser
1)เข้า S3 เลือก Create bucket
-ชื่อ : s306991234
-Object Ownership : ACLs enabled
-เอา Block all public access ออก
2)Upload รูปภาพ แล้วกดเข้าที่รูปกด Actions มุมขวาบนแล้วเลือก Make public using ACL
3)กดเข้าที่รูปใหม่แล้วเลือก Object URL
สิ่งที่ต้องส่ง: ส่งภาพเดียวให้เห็นหน้าจอที่แสดงรายละเอียดของ S3 bucket ได้แก่ชื่อ และ ชื่อไฟล์ที่อยู่ข้างในได้ชัดเจน พร้อมกับผลลัพธ์การทดสอบใน Web
browser

—--------------------------------------------------------------------------------------------
ข้อที่4: ให้นักศึกษาสร้าง S3 bucket โดยตั้งชื่อเป็น lambdaxxxxyyyy (แทนที่ xxxx ด้วยเลขสี่ตัวสุดท้ายของรหัสนักศึกษา และ yyyy ด้วยรหัสส่วนตัวของ
นักศึกษา) และตั้งค่า lifecycle policy เพื่อย้าย object ใน bucket ดังกล่าวไปที่ S3 Glacier อัตโนมัติหลังจาก 30 วัน
1)เข้า S3 เลือก Create bucket
-ชื่อ : lambda06991234
2)เข้าหน้า S3 bucket ที่สร้างแล้วเลือก Management เลือก Create lifecycle rule
-Apply to all objects in the bucket
-Transition current versions of objects between storage classes
-Choose storage class transitions : Glacier Instant Retrieval
-Days after object creation : 30
สิ่งที่ต้องส่ง: ส่งภาพเดียวให้เห็นหน้าจอที่แสดงรายละเอียดของ S3 bucket ได้แก่ชื่อ และ lifecycle policy ได้ชัดเจน

—--------------------------------------------------------------------------------------------
ข้อที่5: ให้นักศึกษาสร้าง Lambda function โดยตั้งชื่อเป็น lambdaxxxxyyyy (แทนที่ xxxx ด้วยเลขสี่ตัวสุดท้ายของรหัสนักศึกษา และ yyyy ด้วยรหัสส่วนตัวของ
นักศึกษา) ที่รับข้อมูลนําเข้าเป็นข้อความ (String) จากนั้นทําการประมวลผล โดยนับจํานวนตัวอักษรในข้อความและคืนผลลัพธ์เป็นจํานวนเต็ม (Integer) โดยใช้IAM role ชื่อ LabRole ที่มีอยู่แล้วใน Sandbox Environment นําฟังก์ชันขึ้นให้บริการและทดสอบด้วยคําว่า “Hello <ชื่อเล่นภาษาอังกฤษของนักศึกษา>” เช่น ถ้านักศึกษาชื่อ Ake ข้อมูลนําเข้าในการทดสอบจะเป็น Hello Ake
1)เข้า Lambda เลือก Create function
-Author from scratch (default)
-ชื่อ : lambda06991234
-Runtime : Python 3.13
-Existing role : LabRole
2)แก้ Code เป็น
def lambda_handler(event, context):
    text = event['message']
    return len(text)
จากนั้น Deploy
3)Test ด้วย
{
    "message": "Hello <ชื่อเล่น>"
}
สิ่งที่ต้องส่ง: ส่งภาพเดียวให้เห็นหน้าจอที่แสดงรายละเอียดของ Lambda function ได้แก่ชื่อ และ code ภายในฟังก์ชันได้ชัดเจน พร้อมกับผลลัพธ์การทดสอบ

—--------------------------------------------------------------------------------------------
ข้อที่6: ให้นักศึกษาสร้าง Lambda function โดยตั้งชื่อว่า lambdaxxxxyyyy (แทนที่ xxxx ด้วยเลขสี่ตัวสุดท้ายของรหัสนักศึกษา และ yyyy ด้วยรหัสส่วนตัวของ
นักศึกษา) กําหนด trigger ให้Lambda ทํางานเมื่อมีการเพิ่ม object ใหม่ใน S3 bucket และพิมพช์ ื่อไฟล์ของ object ดังกล่าวออกไปที่ console โดยให้ใช้IAM
role ชื่อ LabRole ที่มีอยู่แล้วใน Sandbox Environment นําฟังก์ชันขึ้นให้บริการและทดสอบ
1)เข้า Lambda เลือก Create function
-Author from scratch (default)
-ชื่อ : lambda06991234
-Runtime : Python 3.13
-Use an existing role : LabRole
2)เลือก Add triger
-Select a source : S3
-Bucket : เลือก S3 1 อันที่สร้างมาก่อนหน้า (ใช้ S3 แบบ default)
-เลือก I acknowledge that using the same S3 bucket for both input and output is not recommended and that this configuration can cause recursive invocations, increased Lambda usage, and increased costs.
3)แก้ Code เป็น
def lambda_handler(event, context):
    for record in event['Records']:
        print(f"New file uploaded: {record['s3']['object']['key']}")
4)เข้าหน้า S3 bucket ที่ผูกเอาไว้แล้ว Upload ภาพ
5)กลับมาหน้า Lambda แล้วเข้า Monitor กดเข้า ViewCloudWatch logs แล้วเข้า Log streams ที่เพิ่มเข้ามา
สิ่งที่ต้องส่ง: ส่งภาพเดียวให้เห็นหน้าจอที่แสดงรายละเอียดของ Lambda function ได้แก่ชื่อ และ code ภายในฟังก์ชันได้ชัดเจน พร้อมกับผลลัพธ์การทดสอบ

—--------------------------------------------------------------------------------------------
ข้อที่7: ให้นักศึกษาสร้าง snapshot ของ EBS volume ของ EC2 instance ตั้งชื่อว่า snapxxxxyyyy (แทนที่ xxxx ด้วยเลขสี่ตัวสุดท้ายของรหัสนักศึกษา และ
yyyy ด้วยรหัสส่วนตัวของนักศึกษา) แล้วสร้าง EBS volum ใหม่จาก snapshot ดังกล่าวโดยตั้งชื่อ volume ว่า ebsxxxxyyyy (แทนที่ xxxx ด้วยเลขสี่ตัวสุดท้ายของ
รหัสนักศึกษา และ yyyy ด้วยรหัสส่วนตัวของนักศึกษา)
1)เข้า EC2 เลือก Launch Instance
-ชื่อ : ec206991234
2)เข้าหน้า EC2 แล้วไป tab ด้านซ้าย Snapshots เลือก Create snapshot
-Resource type : Instance
-ชื่อ : snap06991234
-Inastance ID : เลือก EC2 ที่สร้างเอาไว้ก่อนหน้า
3)เลือก Snapshots ที่สร้างเอาไว้กด Actions แล้วเลือก Create volume from snapshot จากนั้นกด Create volume และค่อยกลับไปเช็คที่หน้า Volumes แล้วเปลี่ยนชื่อ volume นั้น
สิ่งที่ต้องส่ง: ส่งภาพเดียวให้เห็นหน้าจอที่แสดงชื่อของ snapshot ได้ชัดเจน พร้อมกับหน้าจอทแี่ สดงชื่อของ EBS volume ทสี่ ร้างขึ้นจาก snapshot ดังกล่าวได้
ชัดเจน

—--------------------------------------------------------------------------------------------
ข้อที่8: ให้นักศึกษาสร้าง EBS volume ใหม่ขนาดใดก็ได้และตั้งชื่อว่า ebsxxxxyyyy (แทนที่ xxxx ด้วยเลขสี่ตัวสุดท้ายของรหัสนักศึกษา และ yyyy ด้วยรหัส
ส่วนตัวของนักศึกษา) และเชื่อมต่อเป็นไดรฟ์เสริมให้กับ EC2 instance พร้อมทั้ง format และ mount volume ดังกล่าว ทดสอบด้วยคําสั่ง df -h
1)เข้า EC2 เลือก Launch Instance
-ชื่อ : ec206991234
2)เข้าหน้า EC2 แล้วไป tab ด้านซ้าย Volumes เลือก Create volume แล้วเลือก Create volume อีกครั้ง
-ปรับ Storage เป็น 1 GiB
-เช็คให้ดีว่า Availability Zone ตรงกับ Instance ที่ Network ไหม
3)เลือก Volume ที่สร้างแล้วเลือก Actions จากนั้น Attach volume
-เลือก Instance กับ Device name (/dev/sdf) แล้วกด Attach volume
4)กลับไปหน้า Instances แล้วเลือก Connect
พิมพ์คำสั่งตามนี้
lsblk
sudo file -s /dev/xvdf
sudo mkfs -t ext4 /dev/xvdf
sudo mkdir /newvolume
sudo mount /dev/xvdf /newvolume/
df -h
สิ่งที่ต้องส่ง: ส่งภาพเดียวให้เห็นหน้าจอที่แสดงชื่อของ EBS volume ได้ชัดเจน พร้อมกับหน้าจอที่แสดงผลการทดสอบด้วยคําสั่ง df -h

—--------------------------------------------------------------------------------------------
ข้อที่9: ให้นักศึกษาเปิดใช้งาน RDS instance Free Tier ตั้งชื่อว่า rdsxxxxyyyy (แทนที่ xxxx ด้วยเลขสี่ตัวสุดท้ายของรหัสนักศึกษา และ yyyy ด้วยรหัสส่วนตัวของ
นักศึกษา) พร้อม MySQL database engine เชื่อมต่อกับฐานข้อมูลผ่าน EC2 instance จากนั้นรัน SQL query เพื่อสร้างฐานข้อมูลใหม่ชื่อ CS332db และแสดงว่ามีฐานข้อมูลดังกล่าวเกิดขึ้นจริง
1)เข้า EC2 เลือก Security Groups เลือก Create security group
-ชื่อ
-กด Add rule ที่ Inbound rules 
Type : MYSQL/Aurora
Source : Anywhere
แล้วเลือก Create security groups
2)เข้า Aurora and RDS เลือก tab ด้านซ้าย Databases แล้วเลือก Create database
-Engine type : MySQL
-Templates : Free tier
-Credentials management : Self managed และตั้งรหัสผ่าน
-Connectivity -> Public access
-Existing VPC security groups : เลือก security rules ที่เลือกไว้ตอนแรก
กด Create database
3)เข้าหน้า database ที่สร้างเอาไว้ดู Endpoint ที่ tab Connectivity & security
4)เข้าหน้า EC2 instance เลือกตัวที่สร้างแล้วกด Connect มุมขวาบนแล้วกด Connect อีกทีด้านใน EC2 Instance Connect พิมพ์คำสั่งตามนี้
sudo su -
yum update -y
yum install mariadb105 -y
mysql -h [your_endpoint_rds] -u admin -p[your_password_rds]
show databases;
CREATE DATABASE CS332db;
สิ่งที่ต้องส่ง: ส่งภาพเดียวให้เห็นหน้าจอที่แสดงชื่อของ RDS instance ได้ชัดเจน พร้อมกับหน้าจอที่แสดงผลการทดสอบการใช้งานใน EC2

—--------------------------------------------------------------------------------------------
ข้อที่10: ให้นักศึกษาเปิดใช้งาน RDS instance Free Tier ตั้งชื่อว่า rdsxxxxyyyy (แทนที่ xxxx ด้วยเลขสี่ตัวสุดท้ายของรหัสนักศึกษา และ yyyy ด้วยรหัสส่วนตัว
ของนักศึกษา) พร้อม MySQL database engine แล้วสร้าง Read Replica ของ instance ดังกล่าว ตั้งชื่อว่า rrxxxxyyyy
1)เข้า EC2 เลือก Security Groups เลือก Create security group
-ชื่อ
-กด Add rule ที่ Inbound rules 
Type : MYSQL/Aurora
Source : Anywhere
แล้วเลือก Create security groups
2)เข้า Aurora and RDS เลือก tab ด้านซ้าย Databases แล้วเลือก Create database
-Engine type : MySQL
-Templates : Free tier
-Credentials management : Self managed และตั้งรหัสผ่าน
-Connectivity -> Public access
-Existing VPC security groups : เลือก security rules ที่เลือกไว้ตอนแรก
กด Create database
3)เลือก database ที่สร้างเอาไว้แล้วให้กด Actions จากนั้นเลือก Create read replica
-ชื่อ (DB instance identifier) : rrxxxxyyyy
-เอา Enable Enhanced monitoring ออก
จากนั้นเลือก Create read replica
สิ่งที่ต้องส่ง: ส่งภาพเดียวให้เห็นหน้าจอที่แสดงชื่อของ RDS instance ได้ชัดเจน พร้อมกับหน้าจอที่แสดงชื่อพร้อมสถานะ Available ของ Read Replica

—--------------------------------------------------------------------------------------------

